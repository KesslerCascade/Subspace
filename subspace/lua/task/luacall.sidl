#include "luatask.sidl"
#include "lua/luathread.h"
#include <cx/fs.h>
#include <cx/stype/stvar.h>

#define luacallCreate(luastate, funcname, mustexist, maxresults, ...) luacall_create(luastate, funcname, mustexist, maxresults, count_macro_args(__VA_ARGS__), (stvar[]) { __VA_ARGS__ })
bool luaCallback(stvlist *cvars, stvlist *args);

class LuaCall extends LuaTask {
    string funcname;

    bool mustexist;
    int maxresults;

    [noinit] sarray:stvar args;
    sarray:stvar results;

    standalone int pushargs(lua_State *L, sa_stvar args);
    standalone int popresults(lua_State *L, int maxresults, sa_stvar *results);
    standalone bool exec(lua_State *L, strref funcname, bool mustexist, sa_stvar args, int maxresults, sa_stvar *results);
    factory _create(LuaThread *lt, strref funcname, bool mustexist, int maxresults, int nargs, stvar args[]);
}

class LuaCallbackDispatch extends LuaCall {
    object:LuaFuncRef func;
    override run;
    standalone bool exec(lua_State *L, int ref, sa_stvar args, int maxresults, sa_stvar *results);
    factory create(LuaThread *lt, LuaFuncRef *funcref, int maxresults, int nargs, stvar args[]);
}

class LuaFuncRef {
    LuaThread *lt;
    int ref;

    [canfail] factory create(LuaThread *lt);
    destroy();
}

class LuaFuncRefCleanup extends LuaTask {
    int ref;

    factory create(LuaThread *lt, int ref);
}